<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Gab â€“ Introduction</title>
    <link>/docs/intro/</link>
    <description>Recent content in Introduction on Gab</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 07 Feb 2025 18:33:11 -0500</lastBuildDate>
    
	  <atom:link href="/docs/intro/index.xml" rel="self" type="application/rss+xml" />
    
    
      
        
      
    
    
    <item>
      <title>Basic Types</title>
      <link>/docs/intro/basic_types/</link>
      <pubDate>Fri, 07 Feb 2025 12:49:57 -0500</pubDate>
      
      <guid>/docs/intro/basic_types/</guid>
      <description>
        
        
        &lt;p&gt;In this chapter, we will learn more about Gab&amp;rsquo;s basic types. At the core of any language is its values - Gab is no different. In fact - values are almost &lt;em&gt;all&lt;/em&gt; there is in Gab&amp;rsquo;s syntax.
This introduction will build the foundation of how to think and program in Gab.&lt;/p&gt;
&lt;h3&gt;Numbers&lt;span class=&#34;hx-absolute -hx-mt-20&#34; id=&#34;numbers&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#numbers&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;Numbers are represented by IEEE 64-bit floating point values. There is no distinct integer type.&lt;/p&gt;
&lt;!--gab--&gt;&lt;pre&gt;&lt;code&gt;
1
-42
0.2 ? # =&gt; gab\number
&lt;/code&gt;&lt;/pre&gt;
&lt;div class=&#34;hx-overflow-x-auto hx-mt-6 hx-flex hx-flex-col hx-rounded-lg hx-border hx-py-4 hx-px-4 contrast-more:hx-border-current contrast-more:dark:hx-border-current hx-border-blue-200 hx-bg-blue-100 hx-text-blue-900 dark:hx-border-blue-200/30 dark:hx-bg-blue-900/30 dark:hx-text-blue-200&#34;&gt;
  &lt;p class=&#34;hx-flex hx-items-center hx-font-medium&#34;&gt;&lt;svg height=16px class=&#34;hx-inline-block hx-align-middle hx-mr-2&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34; fill=&#34;none&#34; viewBox=&#34;0 0 24 24&#34; stroke-width=&#34;2&#34; stroke=&#34;currentColor&#34; aria-hidden=&#34;true&#34;&gt;&lt;path stroke-linecap=&#34;round&#34; stroke-linejoin=&#34;round&#34; d=&#34;M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z&#34;/&gt;&lt;/svg&gt;Note&lt;/p&gt;

  &lt;div class=&#34;hx-w-full hx-min-w-0 hx-leading-7&#34;&gt;
    &lt;div class=&#34;hx-mt-6 hx-leading-7 first:hx-mt-0&#34;&gt;&lt;p&gt;Numbers less than one &lt;strong&gt;require&lt;/strong&gt; a leading zero, as shown below.&lt;/p&gt;
&lt;p&gt;This is because the plain &lt;code&gt;.&lt;/code&gt; would conflict with another element of Gab&amp;rsquo;s syntax (a message send).&lt;/p&gt;&lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;h3&gt;Strings&lt;span class=&#34;hx-absolute -hx-mt-20&#34; id=&#34;strings&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#strings&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;Strings are a sequence of bytes. They are UTF8-encoded. For working with raw un-encoded bytes, Gab provides &lt;code&gt;gab\binary&lt;/code&gt;.&lt;/p&gt;
&lt;!--gab--&gt;&lt;pre&gt;&lt;code&gt;
&#34;gab&#34;
&#34;what type am I?&#34; ?
# =&gt; gab\string

&#39;Single quoted strings support escaping!\n&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class=&#34;hx-overflow-x-auto hx-mt-6 hx-flex hx-flex-col hx-rounded-lg hx-border hx-py-4 hx-px-4 contrast-more:hx-border-current contrast-more:dark:hx-border-current hx-border-blue-200 hx-bg-blue-100 hx-text-blue-900 dark:hx-border-blue-200/30 dark:hx-bg-blue-900/30 dark:hx-text-blue-200&#34;&gt;
  &lt;p class=&#34;hx-flex hx-items-center hx-font-medium&#34;&gt;&lt;svg height=16px class=&#34;hx-inline-block hx-align-middle hx-mr-2&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34; fill=&#34;none&#34; viewBox=&#34;0 0 24 24&#34; stroke-width=&#34;2&#34; stroke=&#34;currentColor&#34; aria-hidden=&#34;true&#34;&gt;&lt;path stroke-linecap=&#34;round&#34; stroke-linejoin=&#34;round&#34; d=&#34;M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z&#34;/&gt;&lt;/svg&gt;As seen above, the operator for inspecting the type of a value is the question mark.&lt;/p&gt;

  &lt;div class=&#34;hx-w-full hx-min-w-0 hx-leading-7&#34;&gt;
    &lt;div class=&#34;hx-mt-6 hx-leading-7 first:hx-mt-0&#34;&gt;&lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;h3&gt;Blocks&lt;span class=&#34;hx-absolute -hx-mt-20&#34; id=&#34;blocks&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#blocks&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;Blocks are Gab&amp;rsquo;s closures or functions. They use the familiar &lt;code&gt;=&amp;gt;&lt;/code&gt; syntax:&lt;/p&gt;
&lt;!--gab--&gt;&lt;pre&gt;&lt;code&gt;
square = (x) =&gt; x * x
# =&gt; &lt;gab\block ...&gt;

square.(2)
# =&gt; 4
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Blocks always have an implicit &lt;strong&gt;self&lt;/strong&gt; local. On their own, it isn&amp;rsquo;t very useful. It will become useful later for defining message &lt;em&gt;specializations&lt;/em&gt;.&lt;/p&gt;
&lt;!--gab--&gt;&lt;pre&gt;&lt;code&gt;
get_me = () =&gt; self
# =&gt; &lt;gab\block ...&gt;

get_me.()
# =&gt; &lt;gab\block ...&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;Messages&lt;span class=&#34;hx-absolute -hx-mt-20&#34; id=&#34;messages&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#messages&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;Messages are another obscure concept, also to be explored later. In this context, think of them as &lt;em&gt;atoms&lt;/em&gt; or &lt;em&gt;keywords&lt;/em&gt; - values which represent themselves. Gab takes this a step further:
the type of a message is &lt;em&gt;also itself&lt;/em&gt;.&lt;/p&gt;
&lt;!--gab--&gt;&lt;pre&gt;&lt;code&gt;
message:      
# =&gt; message:

message: ?  
# =&gt; message:
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Messages are  useful as keys in records, to indicate success or failure in returning from blocks, as enumerations, and in many other ways.
Messages can also be called like blocks - however, they will look up a &lt;em&gt;specialization&lt;/em&gt; based on the receiver&amp;rsquo;s type.&lt;/p&gt;
&lt;!--gab--&gt;&lt;pre&gt;&lt;code&gt;
+:.(2, 2)
# =&gt; 4

+:.(&#39;Hello &#39;, &#39;world!&#39;)
# =&gt; &#39;Hello world!&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Instead of writing out a message literal like &lt;code&gt;+:&lt;/code&gt; and calling it, we can use a different &lt;em&gt;infix&lt;/em&gt; notation. For operators like &lt;code&gt;+:&lt;/code&gt;, that should look familiar!&lt;/p&gt;
&lt;!--gab--&gt;&lt;pre&gt;&lt;code&gt;
2 + 2
# =&gt; 4

# We&#39;ve already seen another syntax for sending messages
#  (ones that aren&#39;t operators)
# Replace the colon `:` at the end with a dot `.` at the front,
#  and you&#39;ve got a message send!
&#39;Hello world!&#39;.println
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;Records&lt;span class=&#34;hx-absolute -hx-mt-20&#34; id=&#34;records&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#records&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;Records are Gab&amp;rsquo;s &lt;em&gt;only&lt;/em&gt; data structure. They serve as both dictionaries &lt;em&gt;and&lt;/em&gt; lists.&lt;/p&gt;
&lt;!--gab--&gt;&lt;pre&gt;&lt;code&gt;
{ msg: &#39;hi&#39; }

[1, 2, 3]

{ name: &#34;Joe&#34; }?
# =&gt; &lt;gab\shape name:&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;Shapes&lt;span class=&#34;hx-absolute -hx-mt-20&#34; id=&#34;shapes&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#shapes&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;Shapes are one of the more obscure concepts in Gab. We&amp;rsquo;ll explore them further later. For now, know that all records with the same set of keys (in the same order) share the same &lt;em&gt;shape&lt;/em&gt;.&lt;/p&gt;
&lt;!--gab--&gt;&lt;pre&gt;&lt;code&gt;
a = { name: &#34;Joe&#34; }

a ?
# =&gt; &lt;gab\shape name:&gt;

b = { name: &#34;Rich&#34; }
b ?
# =&gt; &lt;gab\shape name:&gt;

(a ?) == (b ?)
# =&gt; true:
&lt;/code&gt;&lt;/pre&gt;
&lt;div class=&#34;hx-overflow-x-auto hx-mt-6 hx-flex hx-flex-col hx-rounded-lg hx-border hx-py-4 hx-px-4 contrast-more:hx-border-current contrast-more:dark:hx-border-current hx-border-blue-200 hx-bg-blue-100 hx-text-blue-900 dark:hx-border-blue-200/30 dark:hx-bg-blue-900/30 dark:hx-text-blue-200&#34;&gt;
  &lt;p class=&#34;hx-flex hx-items-center hx-font-medium&#34;&gt;&lt;svg height=16px class=&#34;hx-inline-block hx-align-middle hx-mr-2&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34; fill=&#34;none&#34; viewBox=&#34;0 0 24 24&#34; stroke-width=&#34;2&#34; stroke=&#34;currentColor&#34; aria-hidden=&#34;true&#34;&gt;&lt;path stroke-linecap=&#34;round&#34; stroke-linejoin=&#34;round&#34; d=&#34;M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z&#34;/&gt;&lt;/svg&gt;Note&lt;/p&gt;

  &lt;div class=&#34;hx-w-full hx-min-w-0 hx-leading-7&#34;&gt;
    &lt;div class=&#34;hx-mt-6 hx-leading-7 first:hx-mt-0&#34;&gt;&lt;p&gt;A space is required between &lt;code&gt;a&lt;/code&gt; and &lt;code&gt;?&lt;/code&gt;. Identifiers like &lt;code&gt;a&lt;/code&gt; are allowed to end with either a question mark &lt;code&gt;?&lt;/code&gt; or an exclamation point &lt;code&gt;!&lt;/code&gt;. This serves various conventions
in Gab.&lt;/p&gt;&lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;h3&gt;Fibers&lt;span class=&#34;hx-absolute -hx-mt-20&#34; id=&#34;fibers&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#fibers&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;&lt;code&gt;gab\fiber&lt;/code&gt; is a green thread - similar to processes on the BEAM, and goroutines in golang.&lt;/p&gt;
&lt;!--gab--&gt;&lt;pre&gt;&lt;code&gt;
Fibers.make () =&gt; do
    &#39;I could run on another os thread!&#39;
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Fibers are created as above, and automaticaly queued up for execution. The block passed to &lt;code&gt;make:&lt;/code&gt; will run, potentially on another operating-system thread.
As all Gab values are immutable, the block passed here may capture any variables it likes. However, communicating to this fiber once its created is only possible
through a &lt;code&gt;gab\channel&lt;/code&gt;.&lt;/p&gt;
&lt;h3&gt;Channels&lt;span class=&#34;hx-absolute -hx-mt-20&#34; id=&#34;channels&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#channels&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;Channels are a synchronized portal for handing off values between two &lt;code&gt;gab\fibers&lt;/code&gt;.&lt;/p&gt;
&lt;!--gab--&gt;&lt;pre&gt;&lt;code&gt;
ch = Channels.make

# &lt;!: is a blocking operation to put a value onto a channel
Fibers.make () =&gt; ch &lt;! &#39;Hello world!&#39;

# &gt;!: is the opposite - a blocking operation for taking values out.
ch.&gt;!.println
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;A fiber waiting on a channel operation may not continue executing until either the operation completes or the channel closes.
To prevent fibers from hogging the CPU while they wait, they may yield the CPU to other fibers and will retry their operation at a later time.&lt;/p&gt;
&lt;div class=&#34;hx-overflow-x-auto hx-mt-6 hx-flex hx-flex-col hx-rounded-lg hx-border hx-py-4 hx-px-4 contrast-more:hx-border-current contrast-more:dark:hx-border-current hx-border-blue-200 hx-bg-blue-100 hx-text-blue-900 dark:hx-border-blue-200/30 dark:hx-bg-blue-900/30 dark:hx-text-blue-200&#34;&gt;
  &lt;p class=&#34;hx-flex hx-items-center hx-font-medium&#34;&gt;&lt;svg height=16px class=&#34;hx-inline-block hx-align-middle hx-mr-2&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34; fill=&#34;none&#34; viewBox=&#34;0 0 24 24&#34; stroke-width=&#34;2&#34; stroke=&#34;currentColor&#34; aria-hidden=&#34;true&#34;&gt;&lt;path stroke-linecap=&#34;round&#34; stroke-linejoin=&#34;round&#34; d=&#34;M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z&#34;/&gt;&lt;/svg&gt;Note&lt;/p&gt;

  &lt;div class=&#34;hx-w-full hx-min-w-0 hx-leading-7&#34;&gt;
    &lt;div class=&#34;hx-mt-6 hx-leading-7 first:hx-mt-0&#34;&gt;&lt;p&gt;Even the put message &lt;code&gt;&amp;lt;!:&lt;/code&gt; must block until a receiver arrives to become responsible for the passing value.
This is required by Gab&amp;rsquo;s runtime, as the &lt;code&gt;gab\channel&lt;/code&gt; value is immutable and cannot hold references to other values.&lt;/p&gt;&lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;h2&gt;Conclusion&lt;span class=&#34;hx-absolute -hx-mt-20&#34; id=&#34;conclusion&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#conclusion&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;And thats it! Gab is meant to be small and composable - the core concepts are few, but they compose in powerful ways. The chapters that follow will explore these types further!&lt;/p&gt;

      </description>
    </item>
    
  </channel>
</rss>
